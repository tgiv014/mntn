{"template":"__react_static_root__/src/containers/Project","sharedHashesByProp":{},"data":{"html":{"__html":"<center>\n<img src=\"/img/authmap.png\" />\n</center>\n<p>Shortly after opening up my home server's ssh port to the world (with only public/private key auth enabled), I started getting a flood of attempted ssh requests from all over the place. Out of curiosity, I wanted to see them plotted out on my Grafana dashboard so I started putting together a small service that reads SSH authentication attempts, parses them, and pushes them into influxdb.</p>\n<p>This project originally started out as my first foray into Rust. Pretty soon after that, I began experimenting with Golang for systems programming and decided to port what I had made so far into Go. Links for both versions below:</p>\n<ul>\n<li><a href=\"https://github.com/tgiv014/authmap\">Authmap (Rust)</a> (Not maintained)</li>\n<li><a href=\"https://github.com/tgiv014/authmap_go\">Authmap (Go)</a></li>\n</ul>\n<h1>Goals</h1>\n<p>I have a few goals to refine this project into something more useful:</p>\n<ul>\n<li>Remove every instance of hardcoding and read all configurables from a YAML file.\n<ul>\n<li>Done! Now, the only hardcoded configuration item is the config's location. The application will also generate a default configuration automatically if a config is not found.</li>\n</ul>\n</li>\n<li>Allow grouping requests from the same IP/location in a smart way.\n<ul>\n<li>Done! The <code>ip</code> field is now a tag. This allows grouping by ip and aggregating results within those groups.</li>\n</ul>\n</li>\n<li>Automate downloading the MaxMind GeoIP database.\n<ul>\n<li>This will require user interaction since the database has licensing requirements now.</li>\n</ul>\n</li>\n<li>Make the docker container for this package more accessible.\n<ul>\n<li>Done! Authmap (go) is now available from docker hub as <code>tgiv014/authmap:latest</code>. See <a href=\"https://github.com/tgiv014/authmap_go\">the Authmap repo</a> for installation instructions and an example docker-compose configuration</li>\n</ul>\n</li>\n</ul>\n"},"post":{"fname":"authmap.md","data":{"title":"Authmap","featured":true,"description":"A service that reads attempted SSH authentications and logs them to influxdb.","color":"#395C6B"},"md":"<center>\n<img src=\"/img/authmap.png\" />\n</center>\n<p>Shortly after opening up my home server's ssh port to the world (with only public/private key auth enabled), I started getting a flood of attempted ssh requests from all over the place. Out of curiosity, I wanted to see them plotted out on my Grafana dashboard so I started putting together a small service that reads SSH authentication attempts, parses them, and pushes them into influxdb.</p>\n<p>This project originally started out as my first foray into Rust. Pretty soon after that, I began experimenting with Golang for systems programming and decided to port what I had made so far into Go. Links for both versions below:</p>\n<ul>\n<li><a href=\"https://github.com/tgiv014/authmap\">Authmap (Rust)</a> (Not maintained)</li>\n<li><a href=\"https://github.com/tgiv014/authmap_go\">Authmap (Go)</a></li>\n</ul>\n<h1>Goals</h1>\n<p>I have a few goals to refine this project into something more useful:</p>\n<ul>\n<li>Remove every instance of hardcoding and read all configurables from a YAML file.\n<ul>\n<li>Done! Now, the only hardcoded configuration item is the config's location. The application will also generate a default configuration automatically if a config is not found.</li>\n</ul>\n</li>\n<li>Allow grouping requests from the same IP/location in a smart way.\n<ul>\n<li>Done! The <code>ip</code> field is now a tag. This allows grouping by ip and aggregating results within those groups.</li>\n</ul>\n</li>\n<li>Automate downloading the MaxMind GeoIP database.\n<ul>\n<li>This will require user interaction since the database has licensing requirements now.</li>\n</ul>\n</li>\n<li>Make the docker container for this package more accessible.\n<ul>\n<li>Done! Authmap (go) is now available from docker hub as <code>tgiv014/authmap:latest</code>. See <a href=\"https://github.com/tgiv014/authmap_go\">the Authmap repo</a> for installation instructions and an example docker-compose configuration</li>\n</ul>\n</li>\n</ul>\n","stripped":"authmap"}},"path":"project/authmap"}

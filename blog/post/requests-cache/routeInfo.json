{"template":"__react_static_root__/src/containers/Post","sharedHashesByProp":{},"data":{"html":{"__html":"<h1>The Problem</h1>\n<p>Lately, I've been playing with algorithmic trading using <a href=\"https://www.backtrader.com/\">Backtrader</a>, which is a spectacular tool for experimenting with algorithmic trading strategies. This hobby could be considered a problem in itself, but that's not today's topic. A strategy I've been testing involves maintaining a list of S&#x26;P500 stocks, ranking them by some metrics, and making a portfolio out of the top 20% or so. Essentially, a really impersonal buy-and-hold strategy.</p>\n<p>Unfortunately, this means I need to collect data on 500 stocks over my backtesting time range (5+ years). I would really prefer to use Backtrader's automatic Yahoo Finance data source <code>bt.feeds.YahooFinanceData</code>, but I don't want to send 500+ requests to Yahoo every time I tweak a single variable. On a list of just 16 stocks, it takes ~40 seconds to query 5 years of data and run the strategy. There has to be a better way.</p>\n<h1>Enter <code>requests-cache</code>!</h1>\n<p>Backtrader supports proxies (so we could set up a caching proxy), but under the hood, backtrader's <a href=\"https://github.com/mementum/backtrader/blob/master/backtrader/feeds/yahoo.py\">Yahoo feed</a> uses the <code>requests</code> module! This means we can solve our problem without even touching a proxy service or having to set up local SSL certificates to cache HTTPS.</p>\n<p>All we need to do is run <code>pip install requests-cache</code> and add two lines of code to the start of our Backtrader script.</p>\n<pre><code class=\"language-python\">import requests_cache\nrequests_cache.install_cache('test_cache', expire_after=3600)\n</code></pre>\n<p>Now, requests-cache will automatically cache any requests made via the python <code>request</code> module in a file called <code>test_cache.sqlite</code>. Even HTTPS. With this little change, backtesting against 16 stocks over 5 years finishes in 10 seconds: an improvement of 75%!</p>\n"},"post":{"fname":"requests-cache.md","data":{"title":"Faster Backtesting with requests-cache","date":"2021-02-03 00:00:00 -0500","categories":"code"},"md":"<h1>The Problem</h1>\n<p>Lately, I've been playing with algorithmic trading using <a href=\"https://www.backtrader.com/\">Backtrader</a>, which is a spectacular tool for experimenting with algorithmic trading strategies. This hobby could be considered a problem in itself, but that's not today's topic. A strategy I've been testing involves maintaining a list of S&#x26;P500 stocks, ranking them by some metrics, and making a portfolio out of the top 20% or so. Essentially, a really impersonal buy-and-hold strategy.</p>\n<p>Unfortunately, this means I need to collect data on 500 stocks over my backtesting time range (5+ years). I would really prefer to use Backtrader's automatic Yahoo Finance data source <code>bt.feeds.YahooFinanceData</code>, but I don't want to send 500+ requests to Yahoo every time I tweak a single variable. On a list of just 16 stocks, it takes ~40 seconds to query 5 years of data and run the strategy. There has to be a better way.</p>\n<h1>Enter <code>requests-cache</code>!</h1>\n<p>Backtrader supports proxies (so we could set up a caching proxy), but under the hood, backtrader's <a href=\"https://github.com/mementum/backtrader/blob/master/backtrader/feeds/yahoo.py\">Yahoo feed</a> uses the <code>requests</code> module! This means we can solve our problem without even touching a proxy service or having to set up local SSL certificates to cache HTTPS.</p>\n<p>All we need to do is run <code>pip install requests-cache</code> and add two lines of code to the start of our Backtrader script.</p>\n<pre><code class=\"language-python\">import requests_cache\nrequests_cache.install_cache('test_cache', expire_after=3600)\n</code></pre>\n<p>Now, requests-cache will automatically cache any requests made via the python <code>request</code> module in a file called <code>test_cache.sqlite</code>. Even HTTPS. With this little change, backtesting against 16 stocks over 5 years finishes in 10 seconds: an improvement of 75%!</p>\n","stripped":"requests-cache"}},"path":"blog/post/requests-cache"}

{"pageProps":{"allPostsData":[{"id":"gen","content":"\n## [Mag Field](https://github.com/tgiv014/mag_field)\n![Magfield Example](https://raw.githubusercontent.com/tgiv014/mag_field/main/static/threefold_small.png)\n\nInspired by E/H-field diagrams and built using numpy and pycairo. This project draws a visually pleasing representation of the magnetic field created by randomly placed infinite current-carrying wires extending out of the canvas.\n\n## [Circle Packer](https://github.com/tgiv014/circle_packer)\n![Circle Packer Example](https://raw.githubusercontent.com/tgiv014/circle_packer/main/static/logo.png)\n\nThis project draws something pretty similar to the [color blindness test](https://en.wikipedia.org/wiki/Ishihara_test) everyone knows and loves. Instead of packing circles into a larger circle, it packs them randomly into a mask rendered from an input string. It can also output images as SVG files suitable for use with a plotter or laser cutter.","dateString":"Wed Feb 24 2021","title":"Generative Art","featured":true,"description":"Programs that randomly generate pretty pictures.","bg":"/texture.png"},{"id":"authmap","content":"![Authmap Image](/img/authmap.png)\n\nShortly after opening up my home server's ssh port to the world (with only public/private key auth enabled), I started getting a flood of attempted ssh requests from all over the place. Out of curiosity, I wanted to see them plotted out on my Grafana dashboard so I started putting together a small service that reads SSH authentication attempts, parses them, and pushes them into influxdb.\n\nThis project originally started out as my first foray into Rust. Pretty soon after that, I began experimenting with Golang for systems programming and decided to port what I had made so far into Go. Links for both versions below:\n- [Authmap (Rust)](https://github.com/tgiv014/authmap) (Not maintained)\n- [Authmap (Go)](https://github.com/tgiv014/authmap_go)\n\n# Goals\nI have a few goals to refine this project into something more useful:\n- Remove every instance of hardcoding and read all configurables from a YAML file.\n  - Done! Now, the only hardcoded configuration item is the config's location. The application will also generate a default configuration automatically if a config is not found.\n- Allow grouping requests from the same IP/location in a smart way.\n  - Done! The `ip` field is now a tag. This allows grouping by ip and aggregating results within those groups.\n- Automate downloading the MaxMind GeoIP database.\n  - This will require user interaction since the database has licensing requirements now.\n- Make the docker container for this package more accessible.\n  - Done! Authmap (go) is now available from docker hub as `tgiv014/authmap:latest`. See [the Authmap repo](https://github.com/tgiv014/authmap_go) for installation instructions and an example docker-compose configuration","dateString":"Wed Feb 24 2021","title":"Authmap","featured":true,"description":"A service that reads attempted SSH authentications and logs them to influxdb.","color":"#395C6B"},{"id":"advent","content":"\nStarting in 2020, I've made it a personal goal to complete Advent of Code in a new language every year. In 2020, I kicked this tradition off with Golang.\n\n# 2020\nThis year I decided to pick up Go after watching a [free conference](https://systemsconf.io/) hosted by the folks at [Dgraph](https://dgraph.io/). This was an awesome way to stretch my legs with Go and get comfortable with the syntax and built-in data structures of Go. All my solutions are on [my Github](https://github.com/tgiv014/advent2020).\n\n### Noteworthy Puzzles\n- [Day 10](https://adventofcode.com/2020/day/10)\n  - The first part of the puzzle was easy to solve with built-in sorting functions and iteration, but the second part convinced me to build a graph of every adapter and the other adapters they are compatible with. This solution worked, but desperately needed optimization. In came [memoization](https://en.wikipedia.org/wiki/Memoization) (a topic that never came up in my EE curriculum).\n- [Day 20](https://adventofcode.com/2020/day/20)\n  - This was a fun puzzle, but it was also *mean*. It essentially required you to implement transforms (mirrors and rotations) on 2d boolean arrays and also correlate the edges of the arrays with each other to figure out their position and orientation in a larger image. It took quite a bit of pen and paper sketching to come up with a sensible coordinate system and accurate transforms.","dateString":"Wed Feb 24 2021","title":"Advent of Code","featured":true,"description":"Starting in 2020, I'm trying to complete Advent of Code in a new language every year.","color":"#F7B32B","github":"https://github.com/tgiv014/advent2020"}]},"__N_SSG":true}